esphome:
  name: powermeter
  platform: ESP32
  board: nodemcu-32s
  on_boot:
    # initiate the variables 
    priority: -500
    then:
      lambda: |-
        // initiate the variables 
        for(int i=0; i<12; i++){
            id(dt)[i] = 1000000;
            id(pc)[i] = 0;
        }

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
# api:

ota:

globals:
  # Variables
  - id: e_count # counter for the energy-pulses
    type: unsigned int[12]
  - id: e_count_min # counter for the energy-pulses last minute
    type: unsigned int[12]
  - id: e_count_h # counter for the energy-pulses last hour
    type: unsigned int[12]
  - id: e_count_d # counter for the energy-pulses last day
    type: unsigned int[12]

  - id: t # time counter for power metering
    type: unsigned int
    initial_value: '1'
  
  - id: tp # time of last pulse
    type: unsigned int[12]
  - id: dt # time difference of last two pulses
    type: unsigned int[12]
  - id: pc # counter of pulses
    type: unsigned int[12]

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pw

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Powermeter Fallback Hotspot"
    password: !secret wifi_pw

mqtt:
  broker: !secret mqtt_host
  username: !secret mqtt_user
  password: !secret mqtt_pw

captive_portal:

# Enable time component to reset energy at midnight

time:
  - platform: sntp
    id: sntp_time
    on_time:
      # every minute
      - seconds: 0 
        then:
          - lambda: |-
              float e_[12];
              for(int i=0; i<12; i++){
                e_[i] = float(id(e_count)[i] - id(e_count_min)[i])/1000.0;
                id(e_count_min)[i] = id(e_count)[i];
              }
              id(energy_min_01).publish_state(e_[1]);
              id(energy_min_03).publish_state(e_[3]);
              id(energy_min_04).publish_state(e_[4]);
              id(energy_min_05).publish_state(e_[5]);
              id(energy_min_06).publish_state(e_[6]);
              id(energy_min_07).publish_state(e_[7]);
              id(energy_min_08).publish_state(e_[8]);
              id(energy_min_09).publish_state(e_[9]);
              id(energy_min_10).publish_state(e_[10]);
              id(energy_min_11).publish_state(e_[11]);
      # Every hour
      - seconds: 0
        minutes: 0
        then:
          - lambda: |-
              float e_[12];
              for(int i=0; i<12; i++){
                e_[i] = float(id(e_count)[i] - id(e_count_h)[i])/1000.0;
                id(e_count_h)[i] = id(e_count)[i];
              }
              id(energy_hour_01).publish_state(e_[1]);
              id(energy_hour_03).publish_state(e_[3]);
              id(energy_hour_04).publish_state(e_[4]);
              id(energy_hour_05).publish_state(e_[5]);
              id(energy_hour_06).publish_state(e_[6]);
              id(energy_hour_07).publish_state(e_[7]);
              id(energy_hour_08).publish_state(e_[8]);
              id(energy_hour_09).publish_state(e_[9]);
              id(energy_hour_10).publish_state(e_[10]);
              id(energy_hour_11).publish_state(e_[11]);
      # every day
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - lambda: |-
              float e_[12];
              for(int i=0; i<12; i++){
                e_[i] = float(id(e_count)[i] - id(e_count_d)[i])/1000.0;
                id(e_count_d)[i] = id(e_count)[i];
              }
              id(energy_day_01).publish_state(e_[1]);
              id(energy_day_03).publish_state(e_[3]);
              id(energy_day_04).publish_state(e_[4]);
              id(energy_day_05).publish_state(e_[5]);
              id(energy_day_06).publish_state(e_[6]);
              id(energy_day_07).publish_state(e_[7]);
              id(energy_day_08).publish_state(e_[8]);
              id(energy_day_09).publish_state(e_[9]);
              id(energy_day_10).publish_state(e_[10]);
              id(energy_day_11).publish_state(e_[11]);

# Sensors:
sensor:
### Power ########################################################################
  - platform: template
    name: "Power Meter 01"
    unit_of_measurement: "kW"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 70s
    filters: 
      - or:
        - throttle: 60s
        - delta: 0.05
    lambda: |-
      float dt_;
      float p_;
      int sensor = 1;
      unsigned int t_ = id(sntp_time).now().timestamp;

      if (id(pc)[sensor] < 2) {
        dt_ = float( max( id(dt)[sensor], t_-id(tp)[sensor] ) );
        if( dt_ == 0.0 ){
          dt_ = 1000000.0;
        }
      }
      else {
        dt_ = 5.0/id(pc)[sensor];
      }
      p_ = 3.6/dt_;   // [kW]
      id(pc)[sensor] = 0;
      return p_;
    update_interval: 5s
  - platform: template
    name: "Power Meter 03"
    unit_of_measurement: "kW"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 70s
    filters: 
      - or:
        - throttle: 60s
        - delta: 0.05
    lambda: |-
      float dt_;
      float p_;
      int sensor = 3;
      unsigned int t_ = id(sntp_time).now().timestamp;

      if (id(pc)[sensor] < 2) {
        dt_ = float( max( id(dt)[sensor], t_-id(tp)[sensor] ) );
        if( dt_ == 0.0 ){
          dt_ = 1000000.0;
        }
      }
      else {
        dt_ = 5.0/id(pc)[sensor];
      }
      p_ = 3.6/dt_;   // [kW]
      id(pc)[sensor] = 0;
      return p_;
    update_interval: 5s
  - platform: template
    name: "Power Meter 04"
    unit_of_measurement: "kW"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 70s
    filters: 
      - or:
        - throttle: 60s
        - delta: 0.05
    lambda: |-
      float dt_;
      float p_;
      int sensor = 4;
      unsigned int t_ = id(sntp_time).now().timestamp;

      if (id(pc)[sensor] < 2) {
        dt_ = float( max( id(dt)[sensor], t_-id(tp)[sensor] ) );
        if( dt_ == 0.0 ){
          dt_ = 1000000.0;
        }
      }
      else {
        dt_ = 5.0/id(pc)[sensor];
      }
      p_ = 3.6/dt_;   // [kW]
      id(pc)[sensor] = 0;
      return p_;
    update_interval: 5s
  - platform: template
    name: "Power Meter 05"
    unit_of_measurement: "kW"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 70s
    filters: 
      - or:
        - throttle: 60s
        - delta: 0.05
    lambda: |-
      float dt_;
      float p_;
      int sensor = 5;
      unsigned int t_ = id(sntp_time).now().timestamp;

      if (id(pc)[sensor] < 2) {
        dt_ = float( max( id(dt)[sensor], t_-id(tp)[sensor] ) );
        if( dt_ == 0.0 ){
          dt_ = 1000000.0;
        }
      }
      else {
        dt_ = 5.0/id(pc)[sensor];
      }
      p_ = 3.6/dt_;   // [kW]
      id(pc)[sensor] = 0;
      return p_;
    update_interval: 5s
  - platform: template
    name: "Power Meter 06"
    unit_of_measurement: "kW"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 70s
    filters: 
      - or:
        - throttle: 60s
        - delta: 0.05
    lambda: |-
      float dt_;
      float p_;
      int sensor = 6;
      unsigned int t_ = id(sntp_time).now().timestamp;

      if (id(pc)[sensor] < 2) {
        dt_ = float( max( id(dt)[sensor], t_-id(tp)[sensor] ) );
        if( dt_ == 0.0 ){
          dt_ = 1000000.0;
        }
      }
      else {
        dt_ = 5.0/id(pc)[sensor];
      }
      p_ = 3.6/dt_;   // [kW]
      id(pc)[sensor] = 0;
      return p_;
    update_interval: 5s
  - platform: template
    name: "Power Meter 07"
    unit_of_measurement: "kW"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 70s
    filters: 
      - or:
        - throttle: 60s
        - delta: 0.05
    lambda: |-
      float dt_;
      float p_;
      int sensor = 7;
      unsigned int t_ = id(sntp_time).now().timestamp;

      if (id(pc)[sensor] < 2) {
        dt_ = float( max( id(dt)[sensor], t_-id(tp)[sensor] ) );
        if( dt_ == 0.0 ){
          dt_ = 1000000.0;
        }
      }
      else {
        dt_ = 5.0/id(pc)[sensor];
      }
      p_ = 3.6/dt_;   // [kW]
      id(pc)[sensor] = 0;
      return p_;
    update_interval: 5s
  - platform: template
    name: "Power Meter 08"
    unit_of_measurement: "kW"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 70s
    filters: 
      - or:
        - throttle: 60s
        - delta: 0.05
    lambda: |-
      float dt_;
      float p_;
      int sensor = 8;
      unsigned int t_ = id(sntp_time).now().timestamp;

      if (id(pc)[sensor] < 2) {
        dt_ = float( max( id(dt)[sensor], t_-id(tp)[sensor] ) );
        if( dt_ == 0.0 ){
          dt_ = 1000000.0;
        }
      }
      else {
        dt_ = 5.0/id(pc)[sensor];
      }
      p_ = 3.6/dt_;   // [kW]
      id(pc)[sensor] = 0;
      return p_;
    update_interval: 5s
  - platform: template
    name: "Power Meter 09"
    unit_of_measurement: "kW"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 70s
    filters: 
      - or:
        - throttle: 60s
        - delta: 0.05
    lambda: |-
      float dt_;
      float p_;
      int sensor = 9;
      unsigned int t_ = id(sntp_time).now().timestamp;

      if (id(pc)[sensor] < 2) {
        dt_ = float( max( id(dt)[sensor], t_-id(tp)[sensor] ) );
        if( dt_ == 0.0 ){
          dt_ = 1000000.0;
        }
      }
      else {
        dt_ = 5.0/id(pc)[sensor];
      }
      p_ = 3.6/dt_;   // [kW]
      id(pc)[sensor] = 0;
      return p_;
    update_interval: 5s
  - platform: template
    name: "Power Meter 10"
    unit_of_measurement: "kW"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 70s
    filters: 
      - or:
        - throttle: 60s
        - delta: 0.05
    lambda: |-
      float dt_;
      float p_;
      int sensor = 10;
      unsigned int t_ = id(sntp_time).now().timestamp;

      if (id(pc)[sensor] < 2) {
        dt_ = float( max( id(dt)[sensor], t_-id(tp)[sensor] ) );
        if( dt_ == 0.0 ){
          dt_ = 1000000.0;
        }
      }
      else {
        dt_ = 5.0/id(pc)[sensor];
      }
      // p_ = 3600.0/dt_; // [W]
      p_ = 3.6/dt_;   // [kW]
      id(pc)[sensor] = 0;
      return p_;
    update_interval: 5s
  - platform: template
    name: "Power Meter 11"
    unit_of_measurement: "kW"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 70s
    filters: 
      - or:
        - throttle: 60s
        - delta: 0.05
    lambda: |-
      float dt_;
      float p_;
      int sensor = 11;
      unsigned int t_ = id(sntp_time).now().timestamp;

      if (id(pc)[sensor] < 2) {
        dt_ = float( max( id(dt)[sensor], t_-id(tp)[sensor] ) );
        if( dt_ == 0.0 ){
          dt_ = 1000000.0;
        }
      }
      else {
        dt_ = 5.0/id(pc)[sensor];
      }
      p_ = 3.6/dt_;   // [kW]
      id(pc)[sensor] = 0;
      return p_;
    update_interval: 5s

### Energy min ################################################################
  - platform: template
    name: "Energy last min 01"
    id: energy_min_01
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last min 03"
    id: energy_min_03
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last min 04"
    id: energy_min_04
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last min 05"
    id: energy_min_05
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last min 06"
    id: energy_min_06
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last min 07"
    id: energy_min_07
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last min 08"
    id: energy_min_08
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last min 09"
    id: energy_min_09
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last min 10"
    id: energy_min_10
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last min 11"
    id: energy_min_11
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never

### Energy h ##################################################################
  - platform: template
    name: "Energy last hour 01"
    id: energy_hour_01
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last hour 03"
    id: energy_hour_03
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last hour 04"
    id: energy_hour_04
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last hour 05"
    id: energy_hour_05
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last hour 06"
    id: energy_hour_06
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last hour 07"
    id: energy_hour_07
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last hour 08"
    id: energy_hour_08
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last hour 09"
    id: energy_hour_09
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last hour 10"
    id: energy_hour_10
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last hour 11"
    id: energy_hour_11
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never

### Energy d ##################################################################
  - platform: template
    name: "Energy last day 01"
    id: energy_day_01
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last day 03"
    id: energy_day_03
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last day 04"
    id: energy_day_04
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last day 05"
    id: energy_day_05
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last day 06"
    id: energy_day_06
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last day 07"
    id: energy_day_07
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last day 08"
    id: energy_day_08
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last day 09"
    id: energy_day_09
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last day 10"
    id: energy_day_10
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  - platform: template
    name: "Energy last day 11"
    id: energy_day_11
    unit_of_measurement: "kWh"
    icon: "mdi:gauge"
    accuracy_decimals: 4
    expire_after: 80s
    update_interval: never
  
###############################################################################
binary_sensor:
# Pins used for S0 input:
# 14, 36, 39, 34, 35, 32, 33, 25, 26, 27

  - platform: gpio
    id: s0_01
    device_class: power
    pin: 
      number: 14
      mode: INPUT_PULLDOWN
    filters:
      - delayed_on: 13ms
    internal: True
    on_press:
      then:
        - lambda: |-
            int sensor = 1;
            id(e_count)[sensor] += 1;
            unsigned int t_ = id(sntp_time).now().timestamp;
            id(dt)[sensor] = t_ - id(tp)[sensor];
            id(tp)[sensor] = t_;
            id(pc)[sensor] += 1;
  - platform: gpio
    id: s0_03
    device_class: power    
    pin: 
      number: 36
      mode: INPUT_PULLDOWN
    filters:
      - delayed_on: 13ms
    internal: True
    on_press:
      then:
        - lambda: |-
            int sensor = 3;
            id(e_count)[sensor] += 1;
            unsigned int t_ = id(sntp_time).now().timestamp;
            id(dt)[sensor] = t_ - id(tp)[sensor];
            id(tp)[sensor] = t_;
            id(pc)[sensor] += 1;
  - platform: gpio
    id: s0_04
    device_class: power    
    pin: 
      number: 39
      mode: INPUT_PULLDOWN
    filters:
      - delayed_on: 13ms
    internal: True
    on_press:
      then:
        - lambda: |-
            int sensor = 4;
            id(e_count)[sensor] += 1;
            unsigned int t_ = id(sntp_time).now().timestamp;
            id(dt)[sensor] = t_ - id(tp)[sensor];
            id(tp)[sensor] = t_;
            id(pc)[sensor] += 1;
  - platform: gpio
    id: s0_05
    device_class: power    
    pin: 
      number: 34
      mode: INPUT_PULLDOWN
    filters:
      - delayed_on: 13ms
    internal: True
    on_press:
      then:
        - lambda: |-
            int sensor = 5;
            id(e_count)[sensor] += 1;
            unsigned int t_ = id(sntp_time).now().timestamp;
            id(dt)[sensor] = t_ - id(tp)[sensor];
            id(tp)[sensor] = t_;
            id(pc)[sensor] += 1;
  - platform: gpio
    id: s0_06
    device_class: power    
    pin: 
      number: 35
      mode: INPUT_PULLDOWN
    filters:
      - delayed_on: 13ms
    internal: True
    on_press:
      then:
        - lambda: |-
            int sensor = 6;
            id(e_count)[sensor] += 1;
            unsigned int t_ = id(sntp_time).now().timestamp;
            id(dt)[sensor] = t_ - id(tp)[sensor];
            id(tp)[sensor] = t_;
            id(pc)[sensor] += 1;
  - platform: gpio
    id: s0_07
    device_class: power    
    pin: 
      number: 32
      mode: INPUT_PULLDOWN
    filters:
      - delayed_on: 13ms
    internal: True
    on_press:
      then:
        - lambda: |-
            int sensor = 7;
            id(e_count)[sensor] += 1;
            unsigned int t_ = id(sntp_time).now().timestamp;
            id(dt)[sensor] = t_ - id(tp)[sensor];
            id(tp)[sensor] = t_;
            id(pc)[sensor] += 1;
  - platform: gpio
    id: s0_08
    device_class: power    
    pin: 
      number: 33
      mode: INPUT_PULLDOWN
    filters:
      - delayed_on: 13ms
    internal: True
    on_press:
      then:
        - lambda: |-
            int sensor = 8;
            id(e_count)[sensor] += 1;
            unsigned int t_ = id(sntp_time).now().timestamp;
            id(dt)[sensor] = t_ - id(tp)[sensor];
            id(tp)[sensor] = t_;
            id(pc)[sensor] += 1;
  - platform: gpio
    id: s0_09
    device_class: power    
    pin: 
      number: 25
      mode: INPUT_PULLDOWN
    filters:
      - delayed_on: 13ms
    internal: True
    on_press:
      then:
        - lambda: |-
            int sensor = 9;
            id(e_count)[sensor] += 1;
            unsigned int t_ = id(sntp_time).now().timestamp;
            id(dt)[sensor] = t_ - id(tp)[sensor];
            id(tp)[sensor] = t_;
            id(pc)[sensor] += 1;
  - platform: gpio
    id: s0_10
    device_class: power    
    pin: 
      number: 26
      mode: INPUT_PULLDOWN
    filters:
      - delayed_on: 13ms
    internal: True
    on_press:
      then:
        - lambda: |-
            int sensor = 10;
            id(e_count)[sensor] += 1;
            unsigned int t_ = id(sntp_time).now().timestamp;
            id(dt)[sensor] = t_ - id(tp)[sensor];
            id(tp)[sensor] = t_;
            id(pc)[sensor] += 1;
  - platform: gpio
    id: s0_11
    device_class: power    
    pin: 
      number: 27
      mode: INPUT_PULLDOWN
    filters:
      - delayed_on: 13ms
    internal: True
    on_press:
      then:
        - lambda: |-
            int sensor = 11;
            id(e_count)[sensor] += 1;
            unsigned int t_ = id(sntp_time).now().timestamp;
            id(dt)[sensor] = t_ - id(tp)[sensor];
            id(tp)[sensor] = t_;
            id(pc)[sensor] += 1;
